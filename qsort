
// A simple quick sort algorithm

// Note for below function: j is a iterator which iterates from left to
// right, exclusing index "r". i tracks index of element which has a 
// value < pivot. Therefore once this loop is terminated, we place pivot
// to index i + 1 (pivot we chosen was the rightmoset element). 

int part(int a[], int l, int r)
{
    int pi, i, j;
    pi = a[r];
    i = l - 1;
    for (j = l; j <= r - 1; j++) {
        if (a[l] < pi) {
            i++;
            swap(&a[i], a[j]);    
        }
    }
    swap(&a[i+1], &a[r])
    return (i+1);    
}
int qsort(int a[], int l, int r)
{
    if (l < r) {
        int pi = part(a, l, r);
        qsort(a, l, pi - 1);
        qsort(a, r, pi + 1);
    }
    return 0;
}

int main()
{
    int n;
    int a[]= {1,2,0,2,1,0,2,0,1};
    n  = sizeof (a) / sizeof(a[0]);
    qsort(a, 0, n - 1); // a, left, right
    for( int i = 0; i < n; i++) {
       printf("\n %d", a[i]); 
    }
    return 0;
}

